import { LoadingPage } from "npm/components/loading";
import Head from "next/head";
import type { RouterOutputs } from "npm/utils/api";
import { api } from "npm/utils/api";
import { 
  SignInButton,
  useUser
  } from "@clerk/nextjs";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import Image from "next/image";

//helps with using timestamps

dayjs.extend(relativeTime);

  const CreatePostWizard = () => {

    //gets logged in user info and gets their profile image and ability to post
    //as their header

    const {user} = useUser();
    
    if(!user) return null;
    
    return (
      <div className="flex w-full gap-3">
        <Image 
        src={user.profileImageUrl} 
        alt={`profile picture`} 
        className="h-14 w-14 rounded-full"
        width={56}
        height={56}
        />
        <input 
        placeholder="Type some emojis!" 
        className="bg-transparent grow outline-none"/>
      </div>
    )
  };
  
  type PostWithUser = RouterOutputs["posts"]["getAll"][number];
  
  const PostView = (props: PostWithUser) => { 

    //assigns the author username / profile image to posts they made 

    const {post, author} = props;

    return (
      <div key={post.id} className="flex p-4 border-b border-slate-400 gap-3">
        <Image 
          alt={`${author.username}'s profile picture`} 
          src={author.profileImageUrl} 
          className="h-14 w-14 rounded-full" 
          width={56}
          height={56}
        />
        <div className="flex flex-col">
          <div className="flex text-slate-300">
            <span>{`@${author.username}`} </span> 
            &nbsp; - &nbsp; 
            <span className="font-thin">{`${dayjs(post.createdAt).fromNow()}`}</span>
          </div>
          <span className="text-2xl">{post.content}</span></div>
      </div>
    )
  }

  const Feed = () => {

    //generates all of the posts onto the page as feed

    //1st time fetching feed data and react query allows me to quickly fetch it again later on
    //if needed using old cache
    const {data, isLoading: postsLoading} = api.posts.getAll.useQuery();

    if (postsLoading) return <LoadingPage />;

    if(!data) return <div>Something went wrong</div>

    return (
      <div>
        {[...data, ...data]?.map((fullPost) => (
          <PostView {...fullPost} key={fullPost.post.id} />
          ))}
      </div>
    )
  }

export default function Home() {

  
  const {isLoaded: userLoaded, isSignedIn} = useUser();

  //since i've already fetched this data earlier, react query can use the cached data to quickly
  //fetch it again w/o the const
  //api.posts.getAll.useQuery()

  // user loads really fast so while both posts AND user are loading make the page empty instead 
  //of using a loading page
  if(!userLoaded) return <div />

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full border-x border-slate-400 md:max-w-2xl">
          <div className="border-b border-slate-400 p-4">
            {!isSignedIn && 
            <div className="flex justify-center">
              <SignInButton />
            </div>}
            {isSignedIn && <CreatePostWizard />}
          </div>
          <Feed />
        </div>
      </main>
    </>
  );
}

